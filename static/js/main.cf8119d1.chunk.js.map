{"version":3,"sources":["components/BeerList/BeerList.js","components/BeerSpecs/BeerSpecs.js","App.js","serviceWorker.js","index.js"],"names":["BeerList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClickItem","id","history","push","concat","handleClick","event","type","target","innerText","page","Number","state","setState","per_page","beers","_this2","fetch","then","response","json","arr","map","drink","image","image_url","name","tagline","_this3","getBeers","beerListMap","index","react_default","a","createElement","key","onClick","className","src","Component","BeerSpecs","match","params","getBeer","setId","beer","ibu","abv","ebc","description","food_pairing","App","HashRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf8119d1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './BeerList.css';\n\nclass BeerList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n         page: 1,\n         per_page: 6,\n         beers: [],\n        }\n    }\n\n    getBeers() {\n        fetch(`https://api.punkapi.com/v2/beers?page=${this.state.page}&per_page=${this.state.per_page}`)\n            .then( response => response.json() )\n            .then( arr => {\n                const beers = arr.map(function (drink) {\n                    const beer = {\n                        id: drink.id,\n                        image : drink.image_url,\n                        name : drink.name,\n                        tagline : drink.tagline,\n                    };\n                    return beer;\n                });\n\n                this.setState({\n                    beers: beers,\n                });\n            })\n    }\n\n  handleClickItem = (id) => {\n      this.props.history.push(`/BeerSpecs/${id}`);\n  }\n\n  handleClick = (event) => {\n        const type = event.target.innerText;\n\n        const page = Number(this.state.page);\n\n         if (page >= 2 || page < 19) {\n            if (type === \"NEXT\") {\n                this.setState({\n                    page: page+1,\n                })\n            } else if (type === \"PREV\") {\n                this.setState({\n                    page: page-1,\n                })\n            }\n        }\n  }\n\n\n  render() {\n      this.getBeers();\n      const beerList = this.state.beers;\n      const beerListMap = beerList.map((drink, index) => {\n          return (\n                       <li key={index} onClick={() => this.handleClickItem(drink.id)} className=\"beerItem\">\n                          <div className=\"container\">\n                                <div className=\"image\">\n                                <img src={drink.image} />\n                                </div>\n                                <div className=\"text\">\n                                  <div className=\"beerName\">\n                                      <h1>{drink.name}</h1>\n                                   </div>\n                                  <div className=\"beerTag\">\n                                      {drink.tagline}\n                                  </div>\n                               </div>\n                           </div>\n                       </li>\n        )\n      });\n\n       return (\n          <div className=\"beerList\">\n              <ul className=\"beers\">\n                  {beerListMap}\n              </ul>\n              <div>\n                  <button onClick={this.handleClick}>Prev</button>\n                  <button onClick={this.handleClick}>Next</button>\n              </div>\n          </div>\n       );\n  }\n}\n\nexport default BeerList;\n","import React, {Component} from 'react';\nimport './BeerSpecs.css';\n\nclass BeerSpecs extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: 0,\n            beers: '',\n        }\n    }\n\n    setId() {\n        const id = this.props.match.params.id;\n        this.setState({\n            id: id,\n        }, this.getBeer);\n    }\n\n    componentWillMount() {\n        this.setId();\n    }\n\n    getBeer() {\n        fetch(`https://api.punkapi.com/v2/beers/${this.state.id}`)\n            .then(response => response.json())\n            .then(arr => {\n                this.setState({\n                    beers: arr[0],\n                });\n            })\n    }\n\n    render() {\n        const beer = this.state.beers;\n\n        return (\n            <div className=\"beerSpecs\">\n                <div className=\"image\">\n                    <img src={beer.image_url}/>\n                </div>\n\n                <div className=\"content\">\n                    <div>\n                        <h2>{beer.name}</h2>\n                        <span className=\"small\">{beer.tagline}</span>\n                        <hr/>\n                    </div>\n                    <div>\n                        <div className=\"voltage\">\n                            <span><b>IBU:</b> {beer.ibu}</span>\n                            <span><b>ABV:</b> {beer.abv}</span>\n                            <span><b>EBC:</b> {beer.ebc}</span>\n                        </div>\n                    </div>\n                    <div className=\"description\">\n                        {beer.description}\n                    </div>\n                    <div className=\"served\">\n                        <p>Best served with:</p>\n                        {beer.food_pairing}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BeerSpecs;\n","import React, { Component } from 'react';\nimport './App.css';\nimport BeerList from \"./components/BeerList/BeerList\";\nimport BeerSpecs from \"./components/BeerSpecs/BeerSpecs\";\nimport HashRouter from \"react-router-dom/es/HashRouter\";\nimport Switch from \"react-router-dom/es/Switch\";\nimport Route from \"react-router-dom/es/Route\";\n\nclass App extends Component {\n  render() {\n      return (\n          <div className=\"App\">\n              <HashRouter>\n                  <div>\n                      <Switch>\n                          <Route exact path='/' component={BeerList}/>\n                          <Route path='/BeerSpecs/:id' component={BeerSpecs}/>\n                      </Switch>\n                  </div>\n              </HashRouter>\n          </div>\n      );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}